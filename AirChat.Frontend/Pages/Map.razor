@page "/Map"
@using LeafletForBlazor

<h3>Map</h3>
<button @onclick="onClickRun">Run</button> //launch moving points
<RealTimeMap @ref="realTimeMap"
             width="600px"
             height="600px"
             Parameters="@parameters"></RealTimeMap>

@code {
    RealTimeMap? realTimeMap; // reference to map control
    RealTimeMap.LoadParameters parameters = new RealTimeMap.LoadParameters() // general map settings
        {
            zoom_level = 4, // Adjusted for a broader view
            location = new RealTimeMap.Location()
            {
                latitude = 24.7136, // Riyadh's latitude
                longitude = 46.6753, // Riyadh's longitude
            }
        };

    // Start and end coordinates
    List<double> start = new List<double>() { 24.7136, 46.6753 }; // Riyadh, Saudi Arabia
    List<double> end = new List<double>() { 41.9028, 12.4964 }; // Rome, Italy
    List<double> rio = new List<double>() { -22.9068, -43.1729 }; // Rio de Janeiro, Brazil

    int steps = 1000; // Number of steps for the animation

    RealTimeMap.PointSymbol symbol = new RealTimeMap.PointSymbol()
        {
            color = "black",
            fillColor = "green",
            radius = 10,
            weight = 3,
            opacity = 1,
            fillOpacity = 1
        };

    bool run = false;

    private async Task onClickRun() // Button onclick event
    {
        run = !run;
        List<List<double>> RiyadhToRome = InterpolatePoints(start, end, steps);
        foreach (var point in RiyadhToRome)
        {
            if (!run) break; // Stop if the run flag is toggled off

            RealTimeMap.PointTooltip tooltip = new RealTimeMap.PointTooltip()
                {
                    content = $"{Math.Round(point[0], 3)},{Math.Round(point[1], 3)}",
                    opacity = 0.6,
                };

            await realTimeMap.movePoint(point.ToArray(), symbol, tooltip);
            await Task.Delay(10); // Adjust delay to control animation speed
        }
       
        List<List<double>> RomeToRio = InterpolatePoints(end, rio, steps);
        foreach (var point in RomeToRio)
        {
            if (!run) break; // Stop if the run flag is toggled off

            RealTimeMap.PointTooltip tooltip = new RealTimeMap.PointTooltip()
                {
                    content = $"{Math.Round(point[0], 3)},{Math.Round(point[1], 3)}",
                    opacity = 0.6,
                };
            
            symbol.color = "red"; // Change the color of the symbol
            symbol.fillColor = "blue"; // Change the fill color of the symbol

            await realTimeMap.movePoint(point.ToArray(), symbol, tooltip);
            await Task.Delay(10); // Adjust delay to control animation speed
        }
    }

    private List<List<double>> InterpolatePoints(List<double> start, List<double> end, int steps)
    {
        List<List<double>> points = new List<List<double>>();
        for (int i = 0; i <= steps; i++)
        {
            double latitude = start[0] + (end[0] - start[0]) * i / steps;
            double longitude = start[1] + (end[1] - start[1]) * i / steps;
            points.Add(new List<double>() { latitude, longitude });
        }
        return points;
    }
}

