@page "/Map"
@using LeafletForBlazor
@using Microsoft.AspNetCore.SignalR.Client

<h2>@DataReceived</h2>
<h3>Map</h3>
<button @onclick="onClickRun">Run</button> //launch moving points
<RealTimeMap @ref="realTimeMap"
             width="600px"
             height="600px"
             Parameters="@parameters"></RealTimeMap>

@code {
    string DataReceived = "";
    RealTimeMap? realTimeMap; // reference to map control
    HubConnection hubConnection;
    RealTimeMap.LoadParameters parameters = new RealTimeMap.LoadParameters() // general map settings
        {
            zoom_level = 6, // Adjusted for a broader view
            location = new RealTimeMap.Location()
            {
                latitude = 24.7136, // Riyadh's latitude
                longitude = 46.6753, // Riyadh's longitude
            }
        };

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl("https://localhost:7155/FlightHub")
            .Build();

        await hubConnection.StartAsync();
        hubConnection.On<string>("SendFlightCoordinate", (data) =>
        {
            Console.WriteLine(data);
            DataReceived = data;
            StateHasChanged();
        });
    }

    // Start and end coordinates
    List<double> riyadh = new List<double>() { 24.7136, 46.6753 }; // Riyadh, Saudi Arabia
    List<double> rome = new List<double>() { 41.9028, 12.4964 }; // Rome, Italy
    List<double> brazil = new List<double>() { -14.235004, -51.92528 }; // Rome, Italy
    int steps = 200; // Number of steps for the animation

    RealTimeMap.PointSymbol symbol = new RealTimeMap.PointSymbol()
        {
            color = "black",
            fillColor = "green",
            radius = 10,
            weight = 3,
            opacity = 1,
            fillOpacity = 1
        };

    bool run = false;

    private async Task onClickRun() // Button onclick event
    {
        run = !run;
        List<List<double>> firstRoute = InterpolatePoints(riyadh, rome, steps);
        List<List<double>> secondRoute = InterpolatePoints(rome, brazil, steps);
        await movePoint(firstRoute);
        await movePoint(secondRoute);
    }

    private List<List<double>> InterpolatePoints(List<double> start, List<double> end, int steps)
    {
        List<List<double>> points = new List<List<double>>();
        for (int i = 0; i <= steps; i++)
        {
            double latitude = start[0] + (end[0] - start[0]) * i / steps;
            double longitude = start[1] + (end[1] - start[1]) * i / steps;
            points.Add(new List<double>() { latitude, longitude });
        }
        return points;
    }

    private async Task movePoint(List<List<double>> interpolatedPoints)
    {
        foreach (var point in interpolatedPoints)
        {
            if (!run) break; // Stop if the run flag is toggled off

            RealTimeMap.PointTooltip tooltip = new RealTimeMap.PointTooltip()
                {
                    content = $"{Math.Round(point[0], 3)},{Math.Round(point[1], 3)}",
                    opacity = 0.6,
                };

            await realTimeMap.movePoint(point.ToArray(), symbol, tooltip);
            await Task.Delay(25); // Adjust delay to control animation speed
        }
    }

}

